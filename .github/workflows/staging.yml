name: Deploy to Staging

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Deno Lint, Format, and Test"]
    branches: ["main"]
    types: [completed]

permissions:
  id-token: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    environment: testing
    
    steps:
      - name: Setup repo
        uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Format
        run: deno fmt --check

      - name: List
        run: deno lint

      - name: Test
        run: deno test -A --unstable ./tests/index.ts
        env:
          GRAPHQL_ENDPOINT: ${{ secrets.GRAPHQL_ENDPOINT }}
          GRAPHQL_TOKEN: ${{ secrets.GRAPHQL_TOKEN }}
          GOOGLE_CLOUD_BUCKET: ${{ secrets.GOOGLE_CLOUD_BUCKET }}
          GOOGLE_PRIVATE_KEY_JSON: ${{ secrets.GOOGLE_PRIVATE_KEY_JSON }}
  
  deploy_staging:
    needs: [test]
    runs-on: ubuntu-latest
    name: 'Deploy Staging'
    environment: staging

    steps:
      - name: Setup repo
        uses: actions/checkout@v3

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Deploy
        id: deploy
        uses: denoland/deployctl@v1
        with:
          project: ${{ secrets.PROJECT_SLUG }}
          entrypoint: ./src/index.ts
          import-map: ./import_map.json

      - name: Echo Deploy Id Output
        run: "echo Deploy Id: $DEPLOY_ID"
        env:
          DEPLOY_ID: ${{ steps.deploy.outputs.deployment-id }}
      
      - name: Promote to production
        run: |
          curl -X PATCH \
          -d '{ "productionDeployment": "${{ steps.deploy.outputs.deployment-id }}" }' \
          -H "Authorization: Bearer ${{ secrets.DENO_DEPLOY_TOKEN }}" \
          https://dash.deno.com/api/projects/${{ secrets.STAGING_PROJECT_ID }} \


        
